import Gaffer
import GafferAppleseed
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 59, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["PinwallGenerator"] = Gaffer.Box( "PinwallGenerator" )
parent.addChild( __children["PinwallGenerator"] )
__children["PinwallGenerator"].addChild( GafferScene.Plane( "Plane" ) )
__children["PinwallGenerator"]["Plane"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferOSL.OSLObject( "OSLObject" ) )
__children["PinwallGenerator"]["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "P", Gaffer.V3fPlug( "value", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["PinwallGenerator"]["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.PathFilter( "PathFilter" ) )
__children["PinwallGenerator"]["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferOSL.OSLCode( "PinDeformer" ) )
__children["PinwallGenerator"]["PinDeformer"]["parameters"].addChild( Gaffer.FloatPlug( "cornerRadius", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["PinDeformer"]["out"].addChild( Gaffer.V3fPlug( "outP", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["PinwallGenerator"]["PinDeformer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.MeshType( "MeshType" ) )
__children["PinwallGenerator"]["MeshType"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.CollectScenes( "CollectScenes" ) )
__children["PinwallGenerator"]["CollectScenes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["PinwallGenerator"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["PinwallGenerator"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.V2iPlug( "size", defaultValue = imath.V2i( 40, 40 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.Expression( "Expression" ) )
__children["PinwallGenerator"]["Expression"]["__in"].addChild( Gaffer.V2iPlug( "p0", defaultValue = imath.V2i( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["Expression"]["__out"].addChild( Gaffer.StringVectorDataPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = IECore.StringVectorData( [  ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.Transform( "Transform" ) )
__children["PinwallGenerator"]["Transform"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.Expression( "SampleTextureExpr" ) )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"].addChild( Gaffer.IntPlug( "p0", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"].addChild( Gaffer.StringPlug( "p1", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"].addChild( Gaffer.FloatPlug( "p2", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"].addChild( Gaffer.FloatPlug( "p3", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["SampleTextureExpr"]["__out"].addChild( Gaffer.V3fPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["SampleTextureExpr"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.PathFilter( "PathFilter1" ) )
__children["PinwallGenerator"]["PathFilter1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.StringPlug( "image", defaultValue = '${GAFFER_ROOT}/python/GafferImageTest/images/circles.exr', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.FloatPlug( "depth", defaultValue = 8.5, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.FloatPlug( "border", defaultValue = 0.05000000074505806, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.Backdrop( "Backdrop" ) )
__children["PinwallGenerator"]["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.Backdrop( "Backdrop1" ) )
__children["PinwallGenerator"]["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( Gaffer.Backdrop( "Backdrop3" ) )
__children["PinwallGenerator"]["Backdrop3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["Backdrop3"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"].addChild( GafferScene.Group( "Group" ) )
__children["PinwallGenerator"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallGenerator"]["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Camera"] = GafferScene.Camera( "Camera" )
parent.addChild( __children["Camera"] )
__children["Camera"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"] = GafferScene.Parent( "Parent" )
parent.addChild( __children["Parent"] )
__children["Parent"]["children"].addChild( GafferScene.ScenePlug( "child1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"]["children"].addChild( GafferScene.ScenePlug( "child2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["directional_light"] = GafferAppleseed.AppleseedLight( "directional_light" )
parent.addChild( __children["directional_light"] )
__children["directional_light"].loadShader( "directional_light" )
__children["directional_light"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"] = Gaffer.Box( "PinwallPreviewShader" )
parent.addChild( __children["PinwallPreviewShader"] )
__children["PinwallPreviewShader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["PinwallPreviewShader"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["PinwallPreviewShader"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferOSL.OSLObject( "OSLObject1" ) )
__children["PinwallPreviewShader"]["OSLObject1"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "Cs", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["PinwallPreviewShader"]["OSLObject1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferScene.PathFilter( "PathFilter2" ) )
__children["PinwallPreviewShader"]["PathFilter2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferOSL.OSLCode( "PreviewShading" ) )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"].addChild( Gaffer.V3fPlug( "sunlightDirection", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"].addChild( Gaffer.V3fPlug( "eyePosition", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"].addChild( Gaffer.FloatPlug( "specularity_0_to_1", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"].addChild( Gaffer.FloatPlug( "shininess_1_to_inf", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"]["PreviewShading"]["out"].addChild( Gaffer.Color3fPlug( "previewLighting", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"]["PreviewShading"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["PinwallPreviewShader"]["BoxIn1"].setup( Gaffer.V3fPlug( "out", defaultValue = imath.V3f( 0, 0, 0 ), interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["PinwallPreviewShader"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.Backdrop( "Backdrop2" ) )
__children["PinwallPreviewShader"]["Backdrop2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"]["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferScene.ShaderAssignment( "ShaderAssignment" ) )
__children["PinwallPreviewShader"]["ShaderAssignment"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferScene.OpenGLShader( "Constant" ) )
__children["PinwallPreviewShader"]["Constant"].loadShader( "Constant" )
__children["PinwallPreviewShader"]["Constant"]["parameters"].addChild( Gaffer.Color3fPlug( "Cs", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"]["Constant"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.V3fPlug( "sunlightDirection", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["PinwallPreviewShader"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["PinwallPreviewShader"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.Dot( "Dot" ) )
__children["PinwallPreviewShader"]["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["PinwallPreviewShader"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.Dot( "Dot1" ) )
__children["PinwallPreviewShader"]["Dot1"].setup( GafferScene.ScenePlug( "in", ) )
__children["PinwallPreviewShader"]["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["PinwallPreviewShader"]["BoxIn2"].setup( Gaffer.V3fPlug( "out", defaultValue = imath.V3f( 0, 0, 0 ), interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["PinwallPreviewShader"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.V3fPlug( "eyePosition", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoxIn( "BoxIn3" ) )
__children["PinwallPreviewShader"]["BoxIn3"].setup( Gaffer.FloatPlug( "out", defaultValue = 0.0, ) )
__children["PinwallPreviewShader"]["BoxIn3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.FloatPlug( "specularity_0_to_1", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.BoxIn( "BoxIn4" ) )
__children["PinwallPreviewShader"]["BoxIn4"].setup( Gaffer.FloatPlug( "out", defaultValue = 0.0, ) )
__children["PinwallPreviewShader"]["BoxIn4"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PinwallPreviewShader"].addChild( Gaffer.FloatPlug( "shininess_1_to_inf", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["StandardOptions"] = GafferScene.StandardOptions( "StandardOptions" )
parent.addChild( __children["StandardOptions"] )
__children["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frameRange"]["start"].setValue( 1001 )
parent["frameRange"]["end"].setValue( 1020 )
parent["frame"].setValue( 1009.0 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 43367 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.MetadataAlgo.setNumericBookmark( __children["PinwallGenerator"].scriptNode(), 1, __children["PinwallGenerator"] )
__children["PinwallGenerator"]["Plane"]["name"].setValue( 'pin' )
__children["PinwallGenerator"]["Plane"]["dimensions"].setValue( imath.V2f( 4, 4 ) )
__children["PinwallGenerator"]["Plane"]["divisions"].setValue( imath.V2i( 40, 40 ) )
__children["PinwallGenerator"]["Plane"]["__uiPosition"].setValue( imath.V2f( 68.5970688, 93.231781 ) )
__children["PinwallGenerator"]["OSLObject"]["in"].setInput( __children["PinwallGenerator"]["Plane"]["out"] )
__children["PinwallGenerator"]["OSLObject"]["filter"].setInput( __children["PinwallGenerator"]["PathFilter"]["out"] )
__children["PinwallGenerator"]["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["PinwallGenerator"]["PinDeformer"]["out"]["outP"] )
__children["PinwallGenerator"]["OSLObject"]["__uiPosition"].setValue( imath.V2f( 68.5970688, 85.0677185 ) )
__children["PinwallGenerator"]["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/pin' ] ) )
__children["PinwallGenerator"]["PathFilter"]["__uiPosition"].setValue( imath.V2f( 81.2970657, 89.2497559 ) )
__children["PinwallGenerator"]["PinDeformer"]["parameters"]["cornerRadius"].setValue( 0.15000000596046448 )
__children["PinwallGenerator"]["PinDeformer"]["code"].setValue( "float Z = max( 0, max( abs( P[0] ), abs( P[1] ) ) - 0.5);\n\nfloat scaleToParallel = 1 / ( 1 + 2 * Z );\n\n// Wrap plane to cube\npoint cubed = point( P[0] * scaleToParallel, P[1] * scaleToParallel, Z );\n\n\n// Little hack to reshape edge polygons so we don't get 0 sized triangles\nfloat topologyHackSize = 0.05;\nif( cubed[2] > 0 )\n{\n\tcubed[2] += max( 0, min( abs( cubed[0] ), abs( cubed[1] ) ) - ( 0.5 - topologyHackSize ) ) * topologyHackSize * 4;\n}\n\n// Round corners\nfloat q = 0.5 - cornerRadius;\npoint radiusCenter = point(\n\tclamp( cubed[0], -q, q ), \n\tclamp( cubed[1], -q, q ), \n\tmax( cubed[2], cornerRadius ) );\n\npoint rounded = normalize( cubed - radiusCenter ) * cornerRadius + radiusCenter;\n\noutP = rounded;" )
__children["PinwallGenerator"]["PinDeformer"]["__uiPosition"].setValue( imath.V2f( 55.1349106, 85.667717 ) )
__children["PinwallGenerator"]["MeshType"]["in"].setInput( __children["PinwallGenerator"]["OSLObject"]["out"] )
__children["PinwallGenerator"]["MeshType"]["filter"].setInput( __children["PinwallGenerator"]["PathFilter"]["out"] )
__children["PinwallGenerator"]["MeshType"]["meshType"].setValue( 'linear' )
__children["PinwallGenerator"]["MeshType"]["calculatePolygonNormals"].setValue( True )
__children["PinwallGenerator"]["MeshType"]["overwriteExistingNormals"].setValue( True )
__children["PinwallGenerator"]["MeshType"]["__uiPosition"].setValue( imath.V2f( 68.5970688, 76.903656 ) )
__children["PinwallGenerator"]["CollectScenes"]["in"].setInput( __children["PinwallGenerator"]["Transform"]["out"] )
__children["PinwallGenerator"]["CollectScenes"]["rootNames"].setInput( __children["PinwallGenerator"]["Expression"]["__out"]["p0"] )
__children["PinwallGenerator"]["CollectScenes"]["sourceRoot"].setValue( '/pin' )
__children["PinwallGenerator"]["CollectScenes"]["__uiPosition"].setValue( imath.V2f( 68.597084, 22.9414291 ) )
__children["PinwallGenerator"]["out"].setInput( __children["PinwallGenerator"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["out"], 'connectionGadget:color', imath.Color3f( 0.119999997, 0.150000006, 0.349999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["out"], 'layout:index', 0 )
__children["PinwallGenerator"]["__uiPosition"].setValue( imath.V2f( 146.117828, 90.5325699 ) )
__children["PinwallGenerator"]["BoxOut"]["in"].setInput( __children["PinwallGenerator"]["Group"]["out"] )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["BoxOut"]["__out"], 'connectionGadget:color', imath.Color3f( 0.119999997, 0.150000006, 0.349999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["PinwallGenerator"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 70.097084, 4.01051998 ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["size"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["size"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["size"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["size"], 'divider', False )
__children["PinwallGenerator"]["Expression"]["__in"]["p0"].setInput( __children["PinwallGenerator"]["size"] )
__children["PinwallGenerator"]["Expression"]["__uiPosition"].setValue( imath.V2f( 57.4179344, 22.8348579 ) )
__children["PinwallGenerator"]["Transform"]["in"].setInput( __children["PinwallGenerator"]["MeshType"]["out"] )
__children["PinwallGenerator"]["Transform"]["filter"].setInput( __children["PinwallGenerator"]["PathFilter1"]["out"] )
__children["PinwallGenerator"]["Transform"]["transform"]["rotate"].setValue( imath.V3f( 0, 180, 0 ) )
__children["PinwallGenerator"]["Transform"]["transform"]["translate"].setInput( __children["PinwallGenerator"]["SampleTextureExpr"]["__out"]["p0"] )
__children["PinwallGenerator"]["Transform"]["__uiPosition"].setValue( imath.V2f( 68.5970688, 47.7231331 ) )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"]["p0"].setInput( __children["PinwallGenerator"]["size"]["x"] )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"]["p1"].setInput( __children["PinwallGenerator"]["image"] )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"]["p2"].setInput( __children["PinwallGenerator"]["depth"] )
__children["PinwallGenerator"]["SampleTextureExpr"]["__in"]["p3"].setInput( __children["PinwallGenerator"]["border"] )
__children["PinwallGenerator"]["SampleTextureExpr"]["__uiPosition"].setValue( imath.V2f( 56.9489479, 48.0934181 ) )
__children["PinwallGenerator"]["PathFilter1"]["paths"].setValue( IECore.StringVectorData( [ '/pin' ] ) )
__children["PinwallGenerator"]["PathFilter1"]["__uiPosition"].setValue( imath.V2f( 77.6837692, 53.7790108 ) )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["image"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["image"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["image"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["image"], 'plugValueWidget:type', 'GafferUI.FileSystemPathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["depth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["depth"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["depth"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["enabled"], 'description', 'Turns the node on and off.' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["enabled"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["enabled"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["border"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["border"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["border"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["PinwallGenerator"]["border"], 'divider', False )
__children["PinwallGenerator"]["Backdrop"]["title"].setValue( 'Create one Pin' )
__children["PinwallGenerator"]["Backdrop"]["scale"].setValue( 1.2000000476837158 )
__children["PinwallGenerator"]["Backdrop"]["description"].setValue( "We don't have a nice rounded cube to use as a primitive, so we just bend a plane into the shape we want.\n\nYou could replace this entire branch with a SceneReader providing alternate geometry from an Alembic or USD file.\n" )
__children["PinwallGenerator"]["Backdrop"]["__uiPosition"].setValue( imath.V2f( 69.4752197, 85.2930679 ) )
__children["PinwallGenerator"]["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -23.3889771, -13.7495346 ), imath.V2f( 27.243927, 29.5952988 ) ) )
__children["PinwallGenerator"]["Backdrop1"]["title"].setValue( 'Position each Pin' )
__children["PinwallGenerator"]["Backdrop1"]["scale"].setValue( 1.2000000476837158 )
__children["PinwallGenerator"]["Backdrop1"]["description"].setValue( 'We read the image file specified on the generator, and sample it at the appropriate coordinates using an OSL expression.' )
__children["PinwallGenerator"]["Backdrop1"]["__uiPosition"].setValue( imath.V2f( 68.9260941, 51.3205757 ) )
__children["PinwallGenerator"]["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -22.8398514, -9.04999924 ), imath.V2f( 27.6930695, 19.1336212 ) ) )
__children["PinwallGenerator"]["Backdrop3"]["title"].setValue( 'Assemble the pins onto the Wall' )
__children["PinwallGenerator"]["Backdrop3"]["scale"].setValue( 1.2000000476837158 )
__children["PinwallGenerator"]["Backdrop3"]["description"].setValue( 'The CollectScenes node runs the upstream graph over each coorindate in parallel and assembles the all pins, which we then group under /wall' )
__children["PinwallGenerator"]["Backdrop3"]["__uiPosition"].setValue( imath.V2f( 60.8075104, 21.4742355 ) )
__children["PinwallGenerator"]["Backdrop3"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -14.6548004, -12.1304016 ), imath.V2f( 35.9451981, 19.6548309 ) ) )
__children["PinwallGenerator"]["Group"]["in"][0].setInput( __children["PinwallGenerator"]["CollectScenes"]["out"] )
__children["PinwallGenerator"]["Group"]["name"].setValue( 'wall' )
__children["PinwallGenerator"]["Group"]["__uiPosition"].setValue( imath.V2f( 68.597084, 16.4389896 ) )
__children["Camera"]["transform"]["translate"].setValue( imath.V3f( 52.0235748, 36.6943779, 68.8055496 ) )
__children["Camera"]["transform"]["rotate"].setValue( imath.V3f( -12.6050587, 25.7830906, 9.81839821e-06 ) )
__children["Camera"]["__uiPosition"].setValue( imath.V2f( 118.715729, 89.4050446 ) )
__children["Parent"]["in"].setInput( __children["StandardOptions"]["out"] )
__children["Parent"]["parent"].setValue( '/' )
__children["Parent"]["children"][0].setInput( __children["directional_light"]["out"] )
__children["Parent"]["children"][1].setInput( __children["PinwallGenerator"]["out"] )
__children["Parent"]["__uiPosition"].setValue( imath.V2f( 143.117828, 73.0769196 ) )
__children["directional_light"]["transform"]["translate"].setValue( imath.V3f( -5.1849761, 2.24753819e-07, 4.87034035 ) )
__children["directional_light"]["transform"]["rotate"].setValue( imath.V3f( -47.4736137, -19.7539711, 61.0819397 ) )
__children["directional_light"]["__uiPosition"].setValue( imath.V2f( 133.017838, 84.1409836 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.MetadataAlgo.setNumericBookmark( __children["PinwallPreviewShader"].scriptNode(), 2, __children["PinwallPreviewShader"] )
__children["PinwallPreviewShader"]["__uiPosition"].setValue( imath.V2f( 144.617828, 64.5948868 ) )
__children["PinwallPreviewShader"]["BoxIn"]["__in"].setInput( __children["PinwallPreviewShader"]["in"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["__in"], 'connectionGadget:color', imath.Color3f( 0.119999997, 0.150000006, 0.349999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["__in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["PinwallPreviewShader"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 4.78049326, 32.245491 ) )
__children["PinwallPreviewShader"]["in"].setInput( __children["Parent"]["out"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'connectionGadget:color', imath.Color3f( 0.119999997, 0.150000006, 0.349999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["in"], 'layout:index', 0 )
__children["PinwallPreviewShader"]["OSLObject1"]["in"].setInput( __children["PinwallPreviewShader"]["BoxIn"]["out"] )
__children["PinwallPreviewShader"]["OSLObject1"]["filter"].setInput( __children["PinwallPreviewShader"]["PathFilter2"]["out"] )
__children["PinwallPreviewShader"]["OSLObject1"]["useTransform"].setValue( True )
__children["PinwallPreviewShader"]["OSLObject1"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["PinwallPreviewShader"]["PreviewShading"]["out"]["previewLighting"] )
__children["PinwallPreviewShader"]["OSLObject1"]["__uiPosition"].setValue( imath.V2f( 4.78049374, -6.50847101 ) )
__children["PinwallPreviewShader"]["PathFilter2"]["paths"].setValue( IECore.StringVectorData( [ '/wall/*' ] ) )
__children["PinwallPreviewShader"]["PathFilter2"]["__uiPosition"].setValue( imath.V2f( 16.794548, -1.72260332 ) )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"]["sunlightDirection"].setInput( __children["PinwallPreviewShader"]["BoxIn1"]["out"] )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"]["eyePosition"].setInput( __children["PinwallPreviewShader"]["BoxIn2"]["out"] )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"]["specularity_0_to_1"].setInput( __children["PinwallPreviewShader"]["BoxIn3"]["out"] )
__children["PinwallPreviewShader"]["PreviewShading"]["parameters"]["shininess_1_to_inf"].setInput( __children["PinwallPreviewShader"]["BoxIn4"]["out"] )
__children["PinwallPreviewShader"]["PreviewShading"]["code"].setValue( 'N = normalize(N);\n\nfloat Ks = specularity_0_to_1;\nfloat Kd = 1-Ks;\nfloat shininess = shininess_1_to_inf;\n\nvector eyeDirection = -normalize(eyePosition); // Eye direction from eye\n\n// Change from orientation to direction to get real lightDirection (done by constructing lightOrientation basis and keeping Z)\n\nfloat ax = sunlightDirection[0] * M_PI / 180;\nfloat ay = -sunlightDirection[1] * M_PI / 180;\nfloat az = sunlightDirection[2] * M_PI / 180;\nmatrix rotX = matrix(\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, cos(ax), -sin(ax), 0,\n\t\t\t\t0, sin(ax), cos(ax), 0,\n\t\t\t\t0, 0, 0, 1);\nmatrix rotY = matrix(\n\t\t\t\tcos(ay), 0, sin(ay), 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t-sin(ay), 0, cos(ay), 0,\n\t\t\t\t0, 0, 0, 1);\nmatrix rotZ = matrix(\n\t\t\t\tcos(az), -sin(az), 0, 0,\n\t\t\t\tsin(az), cos(az), 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1);\nvector Xp = transform(rotX, vector(1,0,0));\nXp = transform(rotY, Xp);\nXp = transform(rotZ, Xp);\n\nvector Yp = transform(rotX, vector(0,1,0));\nYp = transform(rotY, Yp);\nYp = transform(rotZ, Yp);\n\t\nvector Zp = cross(Xp, Yp);\nvector lightDirection = -Zp; // Light direction from light\n\n// Diffuse\nfloat cos_light = max(0, dot(N, -lightDirection));\n\n// Specular\nvector R = reflect(-lightDirection, N);  // specular reflection\n//R = -lightDirection - 2*cos_light*N; // same\nfloat specular = pow(max(0,dot(R, -eyeDirection)), shininess);\n\n// Phong total\ncolor beta = color(1) * cos_light * Kd + color(1) * specular * Ks;\nfloat visible_light = cos_light > 0;\nbeta *= visible_light;\n\npreviewLighting = beta;' )
__children["PinwallPreviewShader"]["PreviewShading"]["__uiPosition"].setValue( imath.V2f( -8.19442081, -5.90847063 ) )
__children["PinwallPreviewShader"]["BoxIn1"]["name"].setValue( 'sunlightDirection' )
__children["PinwallPreviewShader"]["BoxIn1"]["__in"].setInput( __children["PinwallPreviewShader"]["sunlightDirection"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.469999999, 0.180999994, 0.180999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'label', 'sunlightDirection' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["x"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["x"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["x"], 'noduleLayout:label', 'sunlightDirection.x' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["y"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["y"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["y"], 'noduleLayout:label', 'sunlightDirection.y' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["z"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["z"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["z"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["__in"]["z"], 'noduleLayout:label', 'sunlightDirection.z' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn1"]["out"], 'noduleLayout:section', 'right' )
__children["PinwallPreviewShader"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( -23.7520142, -3.00740099 ) )
__children["PinwallPreviewShader"]["Backdrop2"]["title"].setValue( 'Apply Preview Shading' )
__children["PinwallPreviewShader"]["Backdrop2"]["scale"].setValue( 1.2000000476837158 )
__children["PinwallPreviewShader"]["Backdrop2"]["description"].setValue( 'We could write a custom GLSL shader, which is considerably more efficient to render, but is slightly harder to pass live plug values like camera and sunlight direction.\n\nSo instead, we choose to bake colors onto the vertices of each pin mesh as a "Cs" PrimitiveVariable and assign a constant OpenGL shader which reads that variable by default.\n\nNote the current shading is very basic and not actually using the eye and light parameters.' )
__children["PinwallPreviewShader"]["Backdrop2"]["__uiPosition"].setValue( imath.V2f( -5.85389805, 4.31331205 ) )
__children["PinwallPreviewShader"]["Backdrop2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -29.2217102, -23.9060955 ), imath.V2f( 31.739212, 21.9417076 ) ) )
__children["PinwallPreviewShader"]["ShaderAssignment"]["in"].setInput( __children["PinwallPreviewShader"]["OSLObject1"]["out"] )
__children["PinwallPreviewShader"]["ShaderAssignment"]["filter"].setInput( __children["PinwallPreviewShader"]["PathFilter2"]["out"] )
__children["PinwallPreviewShader"]["ShaderAssignment"]["shader"].setInput( __children["PinwallPreviewShader"]["Constant"]["out"] )
__children["PinwallPreviewShader"]["ShaderAssignment"]["__uiPosition"].setValue( imath.V2f( 4.78049374, -14.672534 ) )
__children["PinwallPreviewShader"]["Constant"]["__uiPosition"].setValue( imath.V2f( -9.9907465, -14.672534 ) )
__children["PinwallPreviewShader"]["sunlightDirection"].setInput( __children["directional_light"]["transform"]["rotate"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'nodule:color', imath.Color3f( 0.469999999, 0.180999994, 0.180999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'label', 'sunlightDirection' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["x"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["x"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["x"], 'noduleLayout:label', 'sunlightDirection.x' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["y"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["y"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["y"], 'noduleLayout:label', 'sunlightDirection.y' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["z"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["z"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["z"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["sunlightDirection"]["z"], 'noduleLayout:label', 'sunlightDirection.z' )
__children["PinwallPreviewShader"]["BoxOut"]["in"].setInput( __children["PinwallPreviewShader"]["ShaderAssignment"]["out"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["PinwallPreviewShader"]["BoxOut"]["passThrough"].setInput( __children["PinwallPreviewShader"]["Dot"]["out"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["PinwallPreviewShader"]["BoxOut"]["enabled"].setInput( __children["PinwallPreviewShader"]["enabled"] )
__children["PinwallPreviewShader"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 6.28049374, -26.5158119 ) )
__children["PinwallPreviewShader"]["out"].setInput( __children["PinwallPreviewShader"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["out"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["enabled"], 'layout:index', 4 )
__children["PinwallPreviewShader"]["Dot"]["in"].setInput( __children["PinwallPreviewShader"]["Dot1"]["out"] )
__children["PinwallPreviewShader"]["Dot"]["__uiPosition"].setValue( imath.V2f( 32.4343567, -19.0158119 ) )
__children["PinwallPreviewShader"]["Dot1"]["in"].setInput( __children["PinwallPreviewShader"]["BoxIn"]["out"] )
__children["PinwallPreviewShader"]["Dot1"]["__uiPosition"].setValue( imath.V2f( 32.4343567, 24.7454967 ) )
__children["PinwallPreviewShader"]["BoxIn2"]["name"].setValue( 'eyePosition' )
__children["PinwallPreviewShader"]["BoxIn2"]["__in"].setInput( __children["PinwallPreviewShader"]["eyePosition"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'nodule:color', imath.Color3f( 0.469999999, 0.180999994, 0.180999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'label', 'eyePosition' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["x"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["x"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["x"], 'noduleLayout:label', 'eyePosition.x' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["y"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["y"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["y"], 'noduleLayout:label', 'eyePosition.y' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["z"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["z"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["z"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["__in"]["z"], 'noduleLayout:label', 'eyePosition.z' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn2"]["out"], 'noduleLayout:section', 'right' )
__children["PinwallPreviewShader"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -25.3270416, -8.60682964 ) )
__children["PinwallPreviewShader"]["eyePosition"].setInput( __children["Camera"]["transform"]["translate"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'nodule:color', imath.Color3f( 0.469999999, 0.180999994, 0.180999994 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'label', 'eyePosition' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["x"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["x"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["x"], 'noduleLayout:label', 'eyePosition.x' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["y"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["y"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["y"], 'noduleLayout:label', 'eyePosition.y' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["z"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["z"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["z"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["eyePosition"]["z"], 'noduleLayout:label', 'eyePosition.z' )
__children["PinwallPreviewShader"]["BoxIn3"]["name"].setValue( 'specularity_0_to_1' )
__children["PinwallPreviewShader"]["BoxIn3"]["__uiPosition"].setValue( imath.V2f( -27.2620525, -13.8362226 ) )
__children["PinwallPreviewShader"]["BoxIn3"]["__in"].setInput( __children["PinwallPreviewShader"]["specularity_0_to_1"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'label', 'specularity_0_to_1' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn3"]["out"], 'noduleLayout:section', 'right' )
__children["PinwallPreviewShader"]["specularity_0_to_1"].setValue( 0.5 )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'label', 'specularity_0_to_1' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["specularity_0_to_1"], 'deletable', True )
__children["PinwallPreviewShader"]["BoxIn4"]["name"].setValue( 'shininess_1_to_inf' )
__children["PinwallPreviewShader"]["BoxIn4"]["__uiPosition"].setValue( imath.V2f( -27.2194691, -19.0162945 ) )
__children["PinwallPreviewShader"]["BoxIn4"]["__in"].setInput( __children["PinwallPreviewShader"]["shininess_1_to_inf"] )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'label', 'shininess_1_to_inf' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["BoxIn4"]["out"], 'noduleLayout:section', 'right' )
__children["PinwallPreviewShader"]["shininess_1_to_inf"].setValue( 10.0 )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'description', '' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'label', 'shininess_1_to_inf' )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PinwallPreviewShader"]["shininess_1_to_inf"], 'deletable', True )
__children["StandardOptions"]["in"].setInput( __children["Camera"]["out"] )
__children["StandardOptions"]["options"]["renderCamera"]["value"].setValue( '/camera' )
__children["StandardOptions"]["options"]["renderCamera"]["enabled"].setValue( True )
__children["StandardOptions"]["options"]["renderResolution"]["enabled"].setValue( True )
__children["StandardOptions"]["__uiPosition"].setValue( imath.V2f( 118.715729, 81.2409821 ) )
__children["PinwallGenerator"]["Expression"]["__engine"].setValue( 'python' )
__children["PinwallGenerator"]["Expression"]["__expression"].setValue( 's = parent["__in"]["p0"]\n\nparent["__out"]["p0"] = IECore.StringVectorData( [ str(i)+","+str(j) for i in range(s[0]) for j in range(s[1]) ] )' )
__children["PinwallGenerator"]["SampleTextureExpr"]["__engine"].setValue( 'OSL' )
__children["PinwallGenerator"]["SampleTextureExpr"]["__expression"].setValue( '// Extract index from location name\n\nstring axisTokens[2];\nstring name = context( "collect:rootName", "" );\nsplit( name, axisTokens, ",", 2 );\nint indexX = stoi( axisTokens[0] );\nint indexY = stoi( axisTokens[1] );\n\nint sizeX = parent.__in.p0;\nint sizeY = parent.__in.p0;\n\n// Read image as texture\ncolor sample = texture( parent.__in.p1, float(indexX) / sizeX, 1 - float(indexY) / sizeY );\n\n// Set depth based on grayscale average of sampled pixel\nfloat Z = ( sample[0] + sample[1] + sample[2] ) / 3 * parent.__in.p2;\n\n\nparent.__out.p0 = vector( indexX * ( 1 + parent.__in.p3 ), indexY * ( 1 + parent.__in.p3 ), Z );' )


del __children

